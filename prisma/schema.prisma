generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")

}

model User {
  id              String      @id @default(cuid())
  clerkUserId     String
  patientNo       Int?        @default(autoincrement())
  firstname       String
  lastname        String
  email           String      @unique
  contactNumber   String?
  address         String?
  profileImage    String?
  height          String?
  weight          String?
  userType        USEROLE?
  gender          GENDER?
  contact         String?
  birthdate       DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  patientHistory  PatientHistory[]  @relation("UserPatientHistory")
  Appointment     Appointment[]     @relation("PatientAppointments")
  feedbacks       Feedback[]        @relation("UserFeedback") // Feedback relation

  @@index([firstname])
  Feedback Feedback[]
}


model Doctor {
  id                   String        @id @default(cuid())
  firstname            String
  lastname             String
  username             String?
  password             String?
  description          String
  specialty            String
  status               Boolean @default(true)

  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  Appointment          Appointment[]    @relation("DoctorAppointments")
}

model Appointment {
  id                             String    @id @default(cuid())
  patientId                      String
  doctorId                       String?
  appointmentDescription         String?
  appointmentTime                DateTime
  status                         AppointmentStatus @default(PENDING)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  patient                        User      @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  doctor                         Doctor?   @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: SetNull)

  @@index([patientId])
  @@index([doctorId])
}

model WalkIn {
  id          String        @id @default(cuid())
  firstname   String
  lastname    String
  age         String
  gender      GENDER?
  contact     String
  weight      String?
  height      String?
  address     String?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model PatientHistory {
  id                   String             @id @default(cuid())
  userId               String
  history              String
  createdAt            DateTime           @default(now())

  user                 User               @relation("UserPatientHistory", fields: [userId], references: [id])

  @@index([userId])
}

model Admin {
  
    id         String        @id @default(cuid())
    username   String
    password   String
   
}

enum USEROLE {
  DOCTOR
  ADMIN
  PATIENT
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  APPROVED
  COMPLETED
  CANCELED
}

model Feedback {
  id        String   @id @default(cuid())
  content   String   
  rating    Int?     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt     
  userId    String   
  user      User     @relation(fields: [userId], references: [id])

  @@index([createdAt])
  User User[] @relation("UserFeedback")
}